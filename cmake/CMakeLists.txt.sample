
cmake_minimum_required(VERSION 2.8)
add_compile_options(-std=c++11)

#set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_BUILD_TYPE Release)
#set(CMAKE_BUILD_TYPE Debug)
set(VERSION_MAJOR 2)
set(VERSION_MINER 0)
set(VERSION_PATCH 1)

SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")

include_directories(${CMAKE_SOURCE_DIR}/3rdParty/opencv-3.2.0/include)
include_directories(${CMAKE_SOURCE_DIR}/3rdParty/caffe/include)
include_directories(${CMAKE_SOURCE_DIR}/3rdParty/darknet/include)
include_directories(/usr/local/include)
include_directories(${CMAKE_SOURCE_DIR}/source/include)
include_directories(${CMAKE_SOURCE_DIR}/3rdParty/caffe/build/src)
link_directories(${CMAKE_SOURCE_DIR}/3rdParty/caffe/build/lib)
link_directories(${CMAKE_SOURCE_DIR}/3rdParty/opencv-3.2.0/lib)
link_directories(${CMAKE_SOURCE_DIR}/3rdParty/darknet/lib)
link_directories(${CMAKE_SOURCE_DIR}/lib)
include_directories(/usr/local/cuda/include)
link_directories("/usr/local/cuda/lib64")

add_subdirectory(source lib)
add_subdirectory(samples bin)

#ADD_DEFINITIONS(-DDEBUG)
#if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
#    set(CMAKE_C_FLAGS_DEBUG "-DDEBUG")
#    set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG")
#endif( CMAKE_BUILD_TYPE STREQUAL "Debug" )

#if (CMAKE_BUILD_TYPE STREQUAL Debug)
#    add_definitions(
#            -D_DEBUG
#    )
#endif ()
if (NOT CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DNDEBUG)
endif()

install (FILES ${CMAKE_SOURCE_DIR}/CMakeLists.sdk.sample.txt DESTINATION ./ RENAME "CMakeLists.txt")
install(DIRECTORY ${CMAKE_SOURCE_DIR}/3rdParty/ DESTINATION 3rdParty FILES_MATCHING PATTERN "*.*")
install(DIRECTORY ${CMAKE_SOURCE_DIR}/lib/ DESTINATION lib FILES_MATCHING PATTERN "*.*")
install (DIRECTORY ${CMAKE_SOURCE_DIR}/include/ DESTINATION include FILES_MATCHING PATTERN "*.*")
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install)

configure_file( version.h.in ${CMAKE_SOURCE_DIR}/source/version.h @ONLY )
aux_source_directory(${CMAKE_SOURCE_DIR}/source/mtcnn src_code_mtcnn)
add_library(xxx SHARED ${src_code} ${src_code_mtcnn})
target_link_libraries(xxx openpose caffe darknet boost_date_time)
set_target_properties(xxx PROPERTIES VERSION "${VERSION_MAJOR}.${VERSION_MINER}.${VERSION_PATCH}")
install(
        TARGETS xxx
        LIBRARY DESTINATION lib )
        
        
find_package(CUDA)
set(CUDA_HOST_COMPILER g++)
list(APPEND CUDA_NVCC_FLAGS "-gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61")

list(APPEND CUDA_NVCC_FLAGS "-std=c++11")
list(APPEND CUDA_NVCC_FLAGS "-Xcompiler")
list(APPEND CUDA_NVCC_FLAGS "-fPIC")
CUDA_COMPILE(CU_O 
openposeNms.cu
openposeResize.cu)

CUDA_ADD_LIBRARY(openpose SHARED
openposeCaffe.cpp
openposeConnector.cpp
property.cpp
${CU_O}
)

target_link_libraries(openpose caffe boost_system glog 
opencv_core
opencv_imgproc opencv_imgcodecs
opencv_video opencv_videoio cudart cublas)

CONFIGURE_FILE(
        "${CMAKE_CURRENT_SOURCE_DIR}/dependencies.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/dependencies.cmake"
        @ONLY
)

INSTALL(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/dependencies.cmake")



